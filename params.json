{"name":"Cs360","tagline":"Computer Graphics OpenGL Game","body":"***Tetris-3D***\r\n\r\n--------------------------------------------------------------------------\r\n\r\nThe traditional game of Tetris is rethought here by adding an extra dimension to it, making the gameplay more challenging and the aesthetics more appealing using the graphic capabilities of OpenGL.\r\nThe added 3rd dimension adds another degree of freedom to the rotations of a block exponentially increasing the number of possible configurations of the block object in 3-D space. The goal of traditional tetris was to clear 2 dimensional tiles by obtaining a continous row of horizontal tiles across the length of play area. In this game the player will have to aim to clear a cuboidal volume by achieving a completely filled horizontal level.  The gameplay would become more difficult with time by increasing the falling speed of the blocks. \r\n\r\n--------------------------------------------------------------------------\r\n\r\n**THE RULES OF THE GAME**\r\n\r\n1.\tPlayer starts out with an empty game volume.\r\n2.\tBricks falls at fixed intervals. Every next block is chosen randomly from the set of available blocks.\r\n3.\tA brick freezes in its position and orientation once it touches the base of the game volume.\r\n4.\tPlayer can rotate the brick using two keys. One rotates the block in horizontal plane. Other rotates it in the vertical \tplane. All possible space orientations of the block are achievable using this combination of two rotations.\r\n5.\tA horizontal level is cleared if it contains no holes.\r\n6.\tA player loses if the top of any block touches the ceiling of the game volume.\r\n7.\tThe fall speed of the blocks increases with time.\r\n\r\n--------------------------------------------------------------------------\r\n\r\n**Instructions for compilation**\r\n\r\n1.\tInstall OpenGl and OpenAl -\r\n\tOpenGL: sudo apt-get install libglu1-mesa-dev freeglut3-dev mesa-common-dev\r\n\tOpenAL: sudo apt-get install libopenal0a libopenal-dev\r\n\tALUT:   sudo apt-get install libalut0 libalut-dev\r\n\r\n2.\tMakefile in Project folder contains the compilation commnads. So , just make and your executable will be ready.\r\n\r\n--------------------------------------------------------------------------\r\n\r\n**PROGRESS-I**\r\n\r\n1.\tCreated a base for the falling blocks. The base defines the playable game volume.\r\n2.\tModelled 5 different type of blocks in Blender.\r\n3.\tCreated an .obj parser to parse the model files into OpenGL standards.\r\n4.\tWrote the library for displaying the parsed object models onto the viewport.\r\n5.\tHave used basic materials ( only the diffuse, specular, ambient and illumination parameters, no textures or shadows \t\tyet) to render the objects.\r\n6.\tImplemented a restrictedly navigable camera with rotation bound to translation bound together for a nice cinematic zoom \teffect.\r\n7.\tCurrently placed blocks into the game volume randomly.\r\n8.\tImplemented basic block selection and movement (albeit without any animation).\r\n\r\n--------------------------------------------------------------------------\r\n\r\n**PROGRESS-II**\r\n\r\n1.\tImplemented falling animation for blocks.\r\n2.\tAdded the background music and button triggered sounds.\r\n3.\tImplemented partial game logic.\r\n4.\tAllow players to save screenshots.\r\n5.\tLoading a character, that is, an object which is not part of the world. \r\n6.\tA navigable camera.\r\n\r\n--------------------------------------------------------------------------\r\n\r\n**Controls**\r\n\r\nA : Move along x-axis\r\n\r\nS : Move along y-axis\r\n\r\nD : Move along x-axis(opposite to A)\r\n\r\nW : Move along y-axis(opposite to S)\r\n\r\nB : Move above the z axis\r\n\r\nN : Move below the z axis\r\n\r\nZ : Screenshot\r\n\r\nX : Exit\r\n\r\nArrow Keys : Sample sound for block move (implemented as test for now)\r\n\r\nMouse Left Click & Right Click (Hold) and drag : Navigate camera\r\n\r\n--------------------------------------------------------------------------\r\n\r\n**FURTHER WORK**\r\n\r\n1.\tThese are the objectives that we plan to include in our game before final submission:\r\n2.\tDesigning a Heads-up Display (HUD) - the HUD will display the current player score, Game title in fancy text and a side \twindow displaying the next block, highest score.\r\n3.\tImplement an algorithm for evaluation of the game state at every timer tick. Need to define the possible states of each \tblock in higher dimensional arrays and find a way to detect collision using these orientation arrays.\r\n4.\tImplement texture mapping for the blocks.\r\n5.\tUse ambient lights and particle effects to add visual appeal. Will make the blocks glow with a light.\r\n6.\tUse raytracing( if feasible) or lightmaps to create realistic shadows.\r\n7.\tCreate smooth transition animations for going from one state to other.\r\n8.\t(Optional gameplay element) Add the concept of powers. Bonuses that will destroy large volumes of blocks in single turn.\r\n9.\tAdd sound effects to game\r\n10.\tCreate a background score - either digital (launchpad or some other application) or create instrumental recordings.  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}